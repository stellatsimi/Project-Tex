/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package simple;
import java.sql.*;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.io.FileWriter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import javax.swing.*;
import java.io.IOException;
import java.awt.BorderLayout;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.border.EmptyBorder;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author USER
 */
public class mainMenu extends javax.swing.JFrame {

    //Πρέπει να μπει το Path των αρχείων daily_plots.py, markt_web.py, metro_web.py, top_product.py, z.py
    public String path = "C:\\Users\\chris\\Documents\\ceid\\8\\";

    /**
     * Creates new form mainMenu
     */
    public mainMenu() throws SQLException {
        initComponents();
        addListener();
        addSearchBox();
        saveChanges();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        automated_order_table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        automated_order_jcb = new javax.swing.JComboBox<>();
        aut_prod_name_jtf = new javax.swing.JTextField();
        aut_prod_quan_jtf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        quan_type_jcb = new javax.swing.JComboBox<>();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        log_table = new javax.swing.JTable();
        log_table_jcb = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        log_action_jcb = new javax.swing.JComboBox<>();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        password_jtf = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        receipt_table = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        attribute1Field = new javax.swing.JTextField();
        attribute2Field = new javax.swing.JTextField();
        attribute4Field = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        ProductTable = new javax.swing.JScrollPane();
        Products = new javax.swing.JTable();
        jButton13 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        attribute3Field = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel11 = new javax.swing.JPanel();
        jStaff = new java.awt.Button();
        jStatistics = new java.awt.Button();
        jPanel16 = new javax.swing.JPanel();
        jComboStatistics = new javax.swing.JComboBox<>();
        label2 = new java.awt.Label();
        jback = new javax.swing.JButton();
        jshow = new javax.swing.JButton();
        jstartdate = new javax.swing.JTextField();
        jenddate = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableSearch = new javax.swing.JTable();
        jButton14 = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jProductSearchAdd = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jpassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setAlignmentX(0.0F);
        jPanel2.setAlignmentY(0.0F);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SIMPLE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(756, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(605, 605, 605))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(51, 153, 255));

        jButton1.setBackground(new java.awt.Color(51, 204, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Προσθήκη Προϊόντων");
        jButton1.setBorderPainted(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(51, 204, 255));
        jButton2.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Ανάλυση Εκπτώσεων");
        jButton2.setBorderPainted(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(51, 204, 255));
        jButton3.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Αυτοματοποιημένες Παραγγελίες");
        jButton3.setBorderPainted(false);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(51, 204, 255));
        jButton5.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Ταμειακή");
        jButton5.setBorderPainted(false);
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(51, 204, 255));
        jButton4.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Ιστορικό Ενεργειών");
        jButton4.setBorderPainted(false);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(51, 204, 255));
        jButton6.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Οικονομικά Στοιχεία");
        jButton6.setBorderPainted(false);
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(51, 204, 255));
        jButton7.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Αποθήκη");
        jButton7.setBorderPainted(false);
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1706, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stam/LOGO.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 1149, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(829, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel10.setText("PASSWORD");
        jLabel10.setMaximumSize(new java.awt.Dimension(170, 22));
        jLabel10.setMinimumSize(new java.awt.Dimension(170, 22));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(397, 397, 397)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(481, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1052, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        automated_order_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Προϊόν", "Ποσότητα", "Είδος Ποσότητας"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        automated_order_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                automated_order_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(automated_order_table);

        jLabel2.setText("Όνομα Προϊόντος");

        jLabel3.setText("Ποσότητα");

        jButton8.setText("Προσθήκη Προϊόντος");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Τροποποίηση Προϊόντος");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Διαγραφή Προϊόντος");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Λήψη Παραγγελίας");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel4.setText("Επιλογή Προμηθευτή");

        automated_order_jcb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                automated_order_jcbItemStateChanged(evt);
            }
        });
        automated_order_jcb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                automated_order_jcbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                automated_order_jcbMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                automated_order_jcbMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                automated_order_jcbMouseReleased(evt);
            }
        });
        automated_order_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automated_order_jcbActionPerformed(evt);
            }
        });

        aut_prod_name_jtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aut_prod_name_jtfActionPerformed(evt);
            }
        });

        jLabel5.setText("Είδος Ποσότητας");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(automated_order_jcb, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aut_prod_name_jtf)
                    .addComponent(aut_prod_quan_jtf)
                    .addComponent(quan_type_jcb, 0, 151, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton11)
                .addGap(248, 248, 248))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(automated_order_jcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(116, 116, 116)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(aut_prod_name_jtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(aut_prod_quan_jtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(quan_type_jcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(129, 129, 129)
                        .addComponent(jButton8)
                        .addGap(28, 28, 28)
                        .addComponent(jButton9)
                        .addGap(26, 26, 26)
                        .addComponent(jButton10))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton11)
                .addContainerGap(735, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        log_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Log Action", "Table", "Inserted Recorded", "Time of Insertion"
            }
        ));
        jScrollPane3.setViewportView(log_table);

        log_table_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "user", "owner", "employee", "product_Storage", "supplier", "invoice", "product_Invoice", "customer", "receipt", "product_Receipt", "orders", "product_Order", "Z", "scanner" }));
        log_table_jcb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                log_table_jcbMouseClicked(evt);
            }
        });
        log_table_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_table_jcbActionPerformed(evt);
            }
        });

        jLabel8.setText("Πίνακας");

        jLabel9.setText("Λειτουργία");

        log_action_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "INSERT", "DELETE", "UPDATE" }));
        log_action_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_action_jcbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1088, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(log_table_jcb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(log_action_jcb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(log_table_jcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(log_action_jcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 827, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("PASSWORD");

        password_jtf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                password_jtfMouseEntered(evt);
            }
        });
        password_jtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                password_jtfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password_jtf, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addComponent(password_jtf, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(416, 416, 416)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(438, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1040, Short.MAX_VALUE))
        );

        receipt_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        receipt_table.setCellSelectionEnabled(true);
        jScrollPane4.setViewportView(receipt_table);
        receipt_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel11.setText("ΣΥΝΟΛΟ");

        jButton12.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jButton12.setText("ΟΛΟΚΛΗΡΩΣΗ");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jTextField3.setText("Barcode");
        jTextField3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField3MouseClicked(evt);
            }
        });
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(721, 721, 721)
                        .addComponent(jLabel11)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(391, 391, 391)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1233, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        searchText.setText("                                    ΑΝΑΖΗΤΗΣΗ");
        searchText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTextMouseClicked(evt);
            }
        });
        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Όνομα", "Barcode"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        attribute1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attribute1FieldActionPerformed(evt);
            }
        });

        attribute2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attribute2FieldActionPerformed(evt);
            }
        });

        attribute4Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attribute4FieldActionPerformed(evt);
            }
        });

        saveButton.setText("ΑΠΟΘΗΚΕΥΣΗ");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        Products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ProductTable.setViewportView(Products);

        jButton13.setText("Show Products");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jLabel7.setText("Ποσότητα");

        jLabel13.setText("ΦΠΑ");

        jLabel14.setText("Τιμή");

        attribute3Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attribute3FieldActionPerformed(evt);
            }
        });

        jLabel15.setText("Barcode");

        jLabel16.setText("Είδος");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "τεμάχια", "κουτιά", "εξάδες", "κιλά","πακέτα","γραμμάρια","λίτρα" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(attribute3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attribute1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(attribute2Field)
                                .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(attribute4Field, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(ProductTable, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton13)
                .addGap(290, 290, 290))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel16))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(attribute3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attribute2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attribute4Field, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(attribute1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ProductTable, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(715, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        jStaff.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jStaff.setLabel("Διαχείριση Προσωπικού");
        jStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jStaffMouseClicked(evt);
            }
        });
        jStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStaffActionPerformed(evt);
            }
        });

        jStatistics.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jStatistics.setLabel("Άλλα Στατιστικά");
        jStatistics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jStatisticsMouseClicked(evt);
            }
        });
        jStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStatisticsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(jStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 275, Short.MAX_VALUE)
                .addComponent(jStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(264, 264, 264))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(1288, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98))
        );

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                jPanel16AncestorRemoved(evt);
            }
        });

        jComboStatistics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboStatistics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboStatisticsMouseClicked(evt);
            }
        });
        jComboStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboStatisticsActionPerformed(evt);
            }
        });

        label2.setAlignment(java.awt.Label.CENTER);
        label2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label2.setText("SIMPLE - ΟΙΚΟΝΟΜΙΚΑ ΣΤΟΙΧΕΙΑ");

        jback.setText("Back");
        jback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbackMouseClicked(evt);
            }
        });
        jback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbackActionPerformed(evt);
            }
        });

        jshow.setText("Show");
        jshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jshowActionPerformed(evt);
            }
        });

        jstartdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstartdateActionPerformed(evt);
            }
        });

        jenddate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jenddateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jback)
                        .addComponent(jshow)
                        .addComponent(jComboStatistics, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel16Layout.createSequentialGroup()
                            .addComponent(jstartdate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jenddate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(474, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jstartdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jenddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jComboStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jshow)
                .addGap(18, 18, 18)
                .addComponent(jback)
                .addContainerGap(480, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jTableSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTableSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Όνομα Προϊόντος", "Τιμή Markt", "Τιμή Metro"
            }
        ));
        jTableSearch.setToolTipText("");
        jScrollPane5.setViewportView(jTableSearch);

        jButton14.setText("Αναζήτηση Εκπτώσεων");
        jButton14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton14MouseClicked(evt);
            }
        });
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Διαγραφή");
        jButtonDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDeleteMouseClicked(evt);
            }
        });

        jButtonAdd.setText("Προσθήκη");
        jButtonAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAddMouseClicked(evt);
            }
        });
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButton14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jProductSearchAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jProductSearchAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAdd))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDelete)
                            .addComponent(jButton14))))
                .addContainerGap(724, Short.MAX_VALUE))
        );

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                jPanel17AncestorRemoved(evt);
            }
        });

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel18.setText("PASSWORD");
        jLabel18.setToolTipText("");

        jpassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpasswordMouseEntered(evt);
            }
        });
        jpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(411, 411, 411)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(431, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(360, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1194, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(9, 9, 9)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2137, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(6, 6, 6)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(711, 711, 711)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(358, 358, 358)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(359, 359, 359)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(true);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Component[] components = jPanel11.getComponents();
                        for (Component component : components) {
                            if (component != jStaff && component != jStatistics ) {
                                jPanel11.remove(component);
                            }
                        }
        
        runPythonScript(path + "daily_plots.py");
        try {
            // Load the plot image from file
            BufferedImage originalImage = ImageIO.read(new File(path + "daily_plots.png"));

            // Get the dimensions of the JPanel
            int panelWidth = jPanel11.getWidth();
            int panelHeight = jPanel11.getHeight();

            // Define the scaling factor to make the image slightly smaller than the panel
            double scaleFactor = 0.7; // Scale down to 90% of the panel size

            // Calculate the scaled dimensions
            int scaledWidth = (int) (panelWidth * scaleFactor);
            int scaledHeight = (int) (panelHeight * scaleFactor);

            // Scale the image to fit within the scaled dimensions
            Image scaledImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
            BufferedImage bufferedScaledImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = bufferedScaledImage.createGraphics();
            g2d.drawImage(scaledImage, 0, 0, null);
            g2d.dispose();

            // Create a JLabel to hold the scaled image
            JLabel label = new JLabel(new ImageIcon(bufferedScaledImage));

            // Clear existing components from jPanel11
        

            // Set layout to BorderLayout to center the image
            jPanel11.setLayout(new BorderLayout());
            // Add the JLabel to the center of jPanel11
            jPanel11.add(label, BorderLayout.CENTER);
            jStaff.setVisible(true);
            jStatistics.setVisible(true);
            // Update jPanel11
            jPanel11.revalidate();
            jPanel11.repaint();
            
        } catch (IOException e) {
            e.printStackTrace(); // Print the stack trace of the exception
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private Connection getDataBaseCon() throws SQLException{
        //Πρέπει να μπουν τα στοιχεία βάσης του εκάστοτε χρήστη
        String user = "root";
        String pass = "root";
            Connection myConn = null;
            myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/simple", user, pass);
            
        return myConn;
    }
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
        
   
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(true);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
        
        ResultSet myRs = null;
        Statement st = null;

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER); // Set text alignment to center

        try {
            Connection myConn;

            myConn = getDataBaseCon();
            st = myConn.createStatement();

            String sql = "SELECT * FROM product_search";
            myRs = st.executeQuery(sql);
            DefaultTableModel tb1Model = (DefaultTableModel) jTableSearch.getModel();
            tb1Model.setRowCount(0);

            while (myRs.next()) {
                String search_name = String.valueOf(myRs.getString("prod_search_name"));

                String tbData[] = { search_name, "-", "-" };

                tb1Model.addRow(tbData);
            }

        } // Catch bblock to handle DB exceptions
        catch (SQLException exc) {
            exc.printStackTrace();
        } finally {
            try {
                if (myRs != null) {
                    myRs.close();
                }
                
            } catch (SQLException exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(true);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(true);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(true);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(true);
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(true);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
    }//GEN-LAST:event_jButton7MouseClicked

    private void addListener() {
    if(jComboBox2.getItemCount() == 0){
                    jComboBox2.addItem("τεμάχια");
                    jComboBox2.addItem("κουτιά");
                    jComboBox2.addItem("εξάδες");
                    jComboBox2.addItem("κιλά");
                    jComboBox2.addItem("πακέτα");
                    jComboBox2.addItem("γρμμάρια");
                    jComboBox2.addItem("λίτρα");
                }

    Products.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        public void valueChanged(ListSelectionEvent e) {
            int selectedRow = Products.getSelectedRow();
            if (selectedRow != -1) {
                String quantity = Products.getValueAt(selectedRow, 1).toString();
                String type = Products.getValueAt(selectedRow,2).toString();
                String fpa = Products.getValueAt(selectedRow, 3).toString();
                String price = Products.getValueAt(selectedRow, 4).toString();
                String barcode = Products.getValueAt(selectedRow,5).toString();

                attribute3Field.setText(quantity);
                attribute1Field.setText(barcode);
                attribute2Field.setText(fpa);
                attribute4Field.setText(price);
                jComboBox2.setSelectedItem(type);
                
            }
        }
    });

} 
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        DefaultTableModel model = (DefaultTableModel)automated_order_table.getModel();
        
        String added_prod_name = aut_prod_name_jtf.getText();
        String string_quan = aut_prod_quan_jtf.getText();
        int added_quan = Integer.parseInt(string_quan);
        String added_quan_type = (String)quan_type_jcb.getSelectedItem();
        
        int numRows = automated_order_table.getRowCount();
        model.setRowCount(numRows);
        Object[] row = new Object[3];
        row[0] = added_prod_name;
        row[1] = added_quan;
        row[2] = added_quan_type;
        model.addRow(row);     
        
        aut_prod_name_jtf.setText("");
        aut_prod_quan_jtf.setText("");
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        int selectedRow = automated_order_table.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)automated_order_table.getModel();
        
        String string_quantity = aut_prod_quan_jtf.getText();
        int new_quantity = Integer.parseInt(string_quantity);
        model.setValueAt(new_quantity, selectedRow, 1);
        
        aut_prod_name_jtf.setText("");
        aut_prod_quan_jtf.setText("");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
           
    }//GEN-LAST:event_jButton3ActionPerformed

    private void automated_order_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automated_order_jcbActionPerformed
        
    }//GEN-LAST:event_automated_order_jcbActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
            
        int selectedRow = automated_order_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to remove.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)automated_order_table.getModel();
        model.removeRow(selectedRow);
        
        aut_prod_name_jtf.setText("");
        aut_prod_quan_jtf.setText("");
    }//GEN-LAST:event_jButton10ActionPerformed

    private void extractInvoice(){
        String selectedItem = (String) automated_order_jcb.getSelectedItem();
        
        JFileChooser fileChooser = new JFileChooser();
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter writer = new FileWriter(fileChooser.getSelectedFile());
                writer.write("Προμηθευτής: " + selectedItem + "\n");

                int numRows = automated_order_table.getRowCount();
                int numCols = automated_order_table.getColumnCount();

                for (int i = 0; i < numCols-1; i++) {
                    writer.write(automated_order_table.getColumnName(i) + ", ");
                }
                writer.write("\n");

                for (int i = 0; i < numRows; i++) {
                    for (int j = 0; j < numCols; j++) {
                        writer.write(automated_order_table.getValueAt(i, j).toString() + ", ");
                    }
                    writer.write("\n");
                }
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        extractInvoice();
        Statement stm = null;
        ResultSet myRs = null;
       
        try{
               Connection myConn;

                myConn = getDataBaseCon();
               
               String supplier_name = (String)automated_order_jcb.getSelectedItem();
               String sql3 = "SELECT supplier_id FROM supplier WHERE supplier_name = '" + supplier_name + "'";
               stm = myConn.createStatement();
               myRs = stm.executeQuery(sql3);
               int sup_id = 0;
               if (myRs.next()) {
                    sup_id = myRs.getInt("supplier_id");
               }
               
               PreparedStatement statement1;
               String sql4 = "INSERT INTO orders(order_id, order_supplier_id) VALUES(null,?)";
               statement1 = myConn.prepareStatement(sql4);
               statement1.setInt(1, sup_id);
               statement1.execute();
               
               int numRows = automated_order_table.getRowCount();
               int numCols = automated_order_table.getColumnCount();
               DefaultTableModel model = (DefaultTableModel)automated_order_table.getModel();
               
               String sql5 = "SELECT order_id FROM orders ORDER BY order_id DESC LIMIT 1";
               stm = myConn.createStatement();
               myRs = stm.executeQuery(sql5);
               int ord_id = 0;
               if (myRs.next()) {
                    ord_id = myRs.getInt("order_id");
               }
               
               PreparedStatement statement2;
               for (int i = 0; i < numRows; i++) {
                    String name = model.getValueAt(i, 0).toString();
                    String quantity = model.getValueAt(i, 1).toString();
                    String quan_type = model.getValueAt(i, 2).toString();
                    
                    String sql6 = "INSERT INTO product_Order VALUES(?,?,?,?)";
                    statement2 = myConn.prepareStatement(sql6);
                    statement2.setString(1, name);
                    statement2.setInt(2, ord_id);
                    statement2.setInt(3, Integer.parseInt(quantity));
                    statement2.setString(4, quan_type);
                    
                    statement2.execute();
                }
               
        }catch(SQLException exc){
               exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }
                
            }catch(SQLException exc){
                   exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked

    }//GEN-LAST:event_jButton11MouseClicked

    private void aut_prod_name_jtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aut_prod_name_jtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aut_prod_name_jtfActionPerformed

    private void automated_order_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_automated_order_tableMouseClicked
        DefaultTableModel model = (DefaultTableModel)automated_order_table.getModel();
        
        String name = model.getValueAt(automated_order_table.getSelectedRow(), 0).toString();
        String quantity = model.getValueAt(automated_order_table.getSelectedRow(), 1).toString();
        String quan_type = model.getValueAt(automated_order_table.getSelectedRow(), 2).toString();
        
        aut_prod_name_jtf.setText(name);
        aut_prod_quan_jtf.setText(quantity);
        quan_type_jcb.setSelectedItem(quan_type);
    }//GEN-LAST:event_automated_order_tableMouseClicked

    private void password_jtfMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_password_jtfMouseEntered
        
    }//GEN-LAST:event_password_jtfMouseEntered

    private void password_jtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_password_jtfActionPerformed
        ResultSet myRs = null;

        try{
               Connection myConn;

                myConn = getDataBaseCon();
               String sql7 = "SELECT user_id FROM user WHERE password=?";
               PreparedStatement statement;
               statement = myConn.prepareStatement(sql7);
               statement.setString(1, password_jtf.getText());
               myRs = statement.executeQuery();
               
               if(myRs.next()){
                   JOptionPane.showMessageDialog(null, "Username and Password Matched");
                   jPanel5.setVisible(false);
                   jPanel6.setVisible(false);
                   jPanel8.setVisible(false);
                   jPanel9.setVisible(false);
                   jPanel10.setVisible(true);
                   jPanel11.setVisible(false);
                   jPanel12.setVisible(false);
                   jPanel13.setVisible(false);
                   jPanel15.setVisible(false);
                   jPanel16.setVisible(false);
                   jPanel17.setVisible(false);
               } else{
                   JOptionPane.showMessageDialog(null, "Wrong Username or Password");
                   password_jtf.setText("");
               }
        }catch(SQLException exc){
               exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }
                
            }catch(SQLException exc){
                   exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_password_jtfActionPerformed

    private void log_table_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_table_jcbActionPerformed
        ResultSet myRs = null;

        try{
               Connection myConn;
               myConn = getDataBaseCon();
               PreparedStatement statement;
               
               
                if(log_action_jcb.getSelectedItem().equals("INSERT")){
                    String[] columns = {"ID", "Log Action", "Table", "Inserted Record", "Time of Insertion"};
                    DefaultTableModel log_table_model = new DefaultTableModel(columns, 0);
                    String sql8 = "SELECT * FROM log_insert WHERE log_ins_table=?";
                    statement = myConn.prepareStatement(sql8);
                    statement.setString(1, (String)log_table_jcb.getSelectedItem());

                    myRs = statement.executeQuery();
                    ArrayList<log_insert> usersList = new ArrayList<>();
                    log_insert logIns;
                    
                    
                    while(myRs.next()){
                        logIns = new log_insert(myRs.getInt("log_ins_id"), myRs.getString("log_ins_action"), myRs.getString("log_ins_table"), myRs.getString("log_ins_new_record"), myRs.getString("log_ins_change_time"));
                        usersList.add(logIns);
                    }
                    
                    if(usersList.isEmpty()){
                        log_table_model.setRowCount(0);
                        log_table.setModel(log_table_model);
                    } else {
                        log_table_model.setRowCount(0);
                        Object[] row = new Object[5];
                        for(int i = 0; i<usersList.size(); i++){
                        row[0] = usersList.get(i).getlog_ins_id();
                        row[1] = usersList.get(i).getlog_ins_action();
                        row[2] = usersList.get(i).getlog_ins_table();
                        row[3] = usersList.get(i).getlog_ins_new_record();
                        row[4] = usersList.get(i).getlog_ins_change_time();
                        log_table_model.addRow(row);

                        log_table.setModel(log_table_model);
                        }
                    }
                }
                
                if(log_action_jcb.getSelectedItem().equals("UPDATE")){
                    //List<String> columnNames = getColumnNames(metaData, "INSERT");
                    //DefaultTableModel tableModel = new DefaultTableModel(columnNames.toArray(), 0);
                    //DefaultTableModel log_table = new DefaultTableModel(columnNames.toArray(), 0);
                    String[] columns = {"ID", "Log Action", "Table", "Column", "Updated Record", "Old Value", "Updated Value", "Time of Update"};
                    DefaultTableModel log_table_model = new DefaultTableModel(columns, 0);
                    String sql8 = "SELECT * FROM log_update WHERE log_up_table=?";
                    statement = myConn.prepareStatement(sql8);
                    statement.setString(1, (String)log_table_jcb.getSelectedItem());

                    myRs = statement.executeQuery();
                    ArrayList<log_update> usersList = new ArrayList<>();
                    log_update logUp;
                    
                    
                    while(myRs.next()){
                        logUp = new log_update(myRs.getInt("log_up_id"), myRs.getString("log_up_action"), myRs.getString("log_up_table"), myRs.getString("log_up_col_name"), myRs.getString("log_up_pk_value"), myRs.getString("log_up_old_value"), myRs.getString("log_up_new_value"), myRs.getString("log_up_change_time"));
                        usersList.add(logUp);
                    }
                    
                    if(usersList.isEmpty()){
                        log_table_model.setRowCount(0);
                        log_table.setModel(log_table_model);
                    } else {
                        log_table_model.setRowCount(0);
                        Object[] row = new Object[8];
                        for(int i = 0; i<usersList.size(); i++){
                        row[0] = usersList.get(i).getlog_up_id();
                        row[1] = usersList.get(i).getlog_up_action();
                        row[2] = usersList.get(i).getlog_up_table();
                        row[3] = usersList.get(i).getlog_up_col_name();
                        row[4] = usersList.get(i).getlog_up_pk_value();
                        row[5] = usersList.get(i).getlog_up_old_value();
                        row[6] = usersList.get(i).getlog_up_new_value();
                        row[7] = usersList.get(i).getlog_up_change_time();
                        log_table_model.addRow(row);

                        log_table.setModel(log_table_model);
                        }
                    }
                }
                
                if(log_action_jcb.getSelectedItem().equals("DELETE")){
                    //List<String> columnNames = getColumnNames(metaData, "INSERT");
                    //DefaultTableModel tableModel = new DefaultTableModel(columnNames.toArray(), 0);
                    //DefaultTableModel log_table = new DefaultTableModel(columnNames.toArray(), 0);
                    String[] columns = {"ID", "Log Action", "Table", "Deleted Record", "Time of Deletion"};
                    DefaultTableModel log_table_model = new DefaultTableModel(columns, 0);
                    String sql8 = "SELECT * FROM log_delete WHERE log_del_table=?";
                    statement = myConn.prepareStatement(sql8);
                    statement.setString(1, (String)log_table_jcb.getSelectedItem());

                    myRs = statement.executeQuery();
                    ArrayList<log_delete> usersList = new ArrayList<>();
                    log_delete logDel;
                    
                    
                    while(myRs.next()){
                        logDel = new log_delete(myRs.getInt("log_del_id"), myRs.getString("log_del_action"), myRs.getString("log_del_table"), myRs.getString("log_del_value"), myRs.getString("log_del_change_time"));
                        usersList.add(logDel);
                    }
                    
                    if(usersList.isEmpty()){
                        log_table_model.setRowCount(0);
                        log_table.setModel(log_table_model);
                    } else {
                        log_table_model.setRowCount(0);
                        Object[] row = new Object[5];
                        for(int i = 0; i<usersList.size(); i++){
                        row[0] = usersList.get(i).getlog_del_id();
                        row[1] = usersList.get(i).getlog_del_action();
                        row[2] = usersList.get(i).getlog_del_table();
                        row[3] = usersList.get(i).getlog_del_value();
                        row[4] = usersList.get(i).getlog_del_change_time();
                        log_table_model.addRow(row);

                        log_table.setModel(log_table_model);
                        }
                    }
                }
               
        } catch(SQLException exc){
               exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }
            }catch(SQLException exc){
                   exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_log_table_jcbActionPerformed

    private void log_table_jcbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_log_table_jcbMouseClicked
        
    }//GEN-LAST:event_log_table_jcbMouseClicked

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        
        try {          
            checkCredentials();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            createReceipt();
            calculateReceiptTotalCost();
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        String email = JOptionPane.showInputDialog(this, "Εισάγετε το email του πελάτη:", "Εισαγωγή Email", JOptionPane.PLAIN_MESSAGE);
        try {
            checkEmail(email);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            downloadReceipt();
            clearTable(receipt_table);
        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void calculateReceiptTotalCost() throws SQLException, ClassNotFoundException {
    int receiptId = getLatestReceiptId();
    DefaultTableModel model = (DefaultTableModel) receipt_table.getModel();
    int tableRows = model.getRowCount();

    try (Connection myConn = getDataBaseCon()) {
        for (int i = 0; i < tableRows; i++) {
            String productName = model.getValueAt(i, 0).toString();

            // Check if the product already exists in the receipt
            String sqlCheck = "SELECT prod_rec_quantity FROM product_Receipt WHERE prod_rec_id=? AND prod_rec_name=?";
            try (PreparedStatement statementCheck = myConn.prepareStatement(sqlCheck)) {
                statementCheck.setInt(1, receiptId);
                statementCheck.setString(2, productName);
                try (ResultSet myRs = statementCheck.executeQuery()) {
                    if (myRs.next()) {
                        // Update the quantity of the existing product in the receipt
                        String sqlUpdate = "UPDATE product_Receipt SET prod_rec_quantity=prod_rec_quantity+1 WHERE prod_rec_id=? AND prod_rec_name=?";
                        try (PreparedStatement statementUpdate = myConn.prepareStatement(sqlUpdate)) {
                            statementUpdate.setInt(1, receiptId);
                            statementUpdate.setString(2, productName);
                            statementUpdate.executeUpdate();
                        }
                    } else {
                        // Insert new product into the receipt
                        String sqlInsert = "INSERT INTO product_Receipt (prod_rec_name, prod_rec_id, prod_rec_quantity) VALUES (?, ?, ?)";
                        try (PreparedStatement statementInsert = myConn.prepareStatement(sqlInsert)) {
                            statementInsert.setString(1, productName);
                            statementInsert.setInt(2, receiptId);
                            statementInsert.setInt(3, 1);
                            statementInsert.executeUpdate();
                        }
                    }
                }
            }
        }
        float totalCost = 0.0f;
        // Calculate total cost
        String sqlTotalCost = "SELECT SUM(pr.prod_rec_quantity * ps.prod_stor_price) AS total_cost " +
                              "FROM product_Receipt pr " +
                              "JOIN product_Storage ps ON pr.prod_rec_name = ps.prod_stor_name " +
                              "WHERE pr.prod_rec_id = ?";
        try (PreparedStatement statementTotalCost = myConn.prepareStatement(sqlTotalCost)) {
            statementTotalCost.setInt(1, receiptId);
            try (ResultSet myRs = statementTotalCost.executeQuery()) {
                if (myRs.next()) {
                    totalCost = myRs.getFloat("total_cost");
                    jLabel12.setText(String.format("%.2f €", totalCost));
                }
            }
        }

        // Update product storage quantities
        String sqlUpdateStorage = "UPDATE product_Storage ps " +
                                  "JOIN product_Receipt pr ON ps.prod_stor_name = pr.prod_rec_name " +
                                  "SET ps.prod_stor_quantity = ps.prod_stor_quantity - pr.prod_rec_quantity " +
                                  "WHERE pr.prod_rec_id = ?";
        try (PreparedStatement statementUpdateStorage = myConn.prepareStatement(sqlUpdateStorage)) {
            statementUpdateStorage.setInt(1, receiptId);
            statementUpdateStorage.executeUpdate();
        }
    } catch (SQLException exc) {
        exc.printStackTrace();
        JOptionPane.showMessageDialog(this, "Σφάλμα κατά την ενημέρωση της απόδειξης.", "Σφάλμα", JOptionPane.ERROR_MESSAGE);
    }
}


private void checkEmail(String email) throws ClassNotFoundException, SQLException{
    int receiptId = getLatestReceiptId();
    String query = "SELECT COUNT(*) AS count FROM customer WHERE email = ?";
    boolean customerExists = false;
    
    Connection myConn;

    myConn = getDataBaseCon();

    
    PreparedStatement preparedStatement = myConn.prepareStatement(query); 
    preparedStatement.setString(1, email);

        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                int count = resultSet.getInt("count");
                customerExists = count > 0;
            }
        }
    
    if(customerExists){
         updateCustomer(email, receiptId);
        
    } else {
        createNewCustomer(email, receiptId);
    }
}

private void updateCustomer(String email, int receiptId) throws ClassNotFoundException, SQLException {
    String selectQuery = "SELECT points, voucher_count FROM customer WHERE email = ?";
    String updateCustomerQuery = "UPDATE customer SET points = ?, voucher_count = ? WHERE email = ?";
    String updateReceiptQuery = "UPDATE receipt SET customer_email = ?, sum = ?, receipt_points = ?, voucher = ? WHERE receipt_id = ?";



    Connection myConn;
    myConn = getDataBaseCon();
        int points = 0;
        int voucherCount = 0;
        String totalCostString = jLabel12.getText().replace("€", "").trim();
        totalCostString = totalCostString.replace(",", ".");
        float totalCost = Float.parseFloat(totalCostString);

        try (PreparedStatement selectStatement = myConn.prepareStatement(selectQuery)) {
            selectStatement.setString(1, email);
            try (ResultSet resultSet = selectStatement.executeQuery()) {
                if (resultSet.next()) {
                    points = resultSet.getInt("points");
                    voucherCount = resultSet.getInt("voucher_count");
                }
            }


        int newPoints = calculatePoints(totalCost);
        points += newPoints;

        int newVouchers = checkAddVouchers(points);
        voucherCount += newVouchers;
        points %= 100;

           while (voucherCount > 0 && totalCost >= 3) {
                        totalCost -= 3;
                        voucherCount--;
                    }


        try (PreparedStatement updateCustomerStatement = myConn.prepareStatement(updateCustomerQuery)) {
            updateCustomerStatement.setInt(1, points);
            updateCustomerStatement.setInt(2, voucherCount);
            updateCustomerStatement.setString(3, email);
            updateCustomerStatement.executeUpdate();
        }

        try (PreparedStatement updateReceiptStatement = myConn.prepareStatement(updateReceiptQuery)) {
            updateReceiptStatement.setString(1, email);
            updateReceiptStatement.setFloat(2, totalCost);
            updateReceiptStatement.setInt(3, newPoints);
            updateReceiptStatement.setInt(4, newVouchers);
            updateReceiptStatement.setInt(5, receiptId);
            updateReceiptStatement.executeUpdate();
        }
        String totalCostStr = String.format("%.2f €", totalCost);
        jLabel12.setText(totalCostStr);
    }
}

private int calculatePoints(float cost){
    return (int) (cost / 3);
  
}

private int checkAddVouchers(int points){
    return points / 100;
}

private void createNewCustomer(String email, int receiptId) throws ClassNotFoundException, SQLException {
    String insertQuery = "INSERT INTO customer (email, points, voucher_count) VALUES (?, ?, ?)";
    String updateQuery = "UPDATE receipt SET customer_email = ?, sum = ?, receipt_points = ?, voucher = ? WHERE receipt_id = ?";
    String totalCostString = jLabel12.getText().replace("€", "").trim();
    totalCostString = totalCostString.replace(",", ".");
    float totalCost = Float.parseFloat(totalCostString);

    int points = calculatePoints(totalCost);
    int vouchers = checkAddVouchers(points);
    points %= 100;

           while (vouchers > 0 && totalCost >= 3) {
                        totalCost -= 3;
                        vouchers--;
                    }

    Connection myConn;
    myConn = getDataBaseCon();
        // Insert the new customer
        try (PreparedStatement insertStatement = myConn.prepareStatement(insertQuery)) {
            insertStatement.setString(1, email);
            insertStatement.setInt(2, points);
            insertStatement.setInt(3, vouchers);
            insertStatement.executeUpdate();
        }

        // Update the receipt
        try (PreparedStatement updateStatement = myConn.prepareStatement(updateQuery)) {
            updateStatement.setString(1, email);
            updateStatement.setFloat(2, totalCost);
            updateStatement.setInt(3, points);
            updateStatement.setInt(4, vouchers);
            updateStatement.setInt(5, receiptId);
            updateStatement.executeUpdate();
        }
        String totalCostStr = String.format("%.2f €", totalCost);
        jLabel12.setText(totalCostStr);
    }

private void runPythonScriptWithDates(String pythonPath, String date1, String date2) {
    try {
        // Adjust the Python command and script path as needed
        ProcessBuilder processBuilder = new ProcessBuilder("python", pythonPath, date1, date2);
        Process process = processBuilder.start();

        // Read the output from the command
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }

        // Wait for the process to complete
        int exitCode = process.waitFor();
        System.out.println("Python script exited with code: " + exitCode);

    } catch (IOException | InterruptedException ex) {
        ex.printStackTrace();
    }
}

private void clearTable(JTable table) {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0);
    jLabel12.setText("");
}

private void downloadReceipt() throws ClassNotFoundException, SQLException, IOException{
    int receiptId = getLatestReceiptId();


    Connection myConn;
    myConn = getDataBaseCon();
        String receiptQuery = "SELECT * FROM receipt WHERE receipt_id = ?";
        String productQuery = "SELECT pr.prod_rec_name, pr.prod_rec_quantity, ps.prod_stor_quantity_type, ps.prod_stor_price, ps.prod_stor_fpa " +
                              "FROM product_Receipt pr " +
                              "JOIN product_Storage ps ON pr.prod_rec_name = ps.prod_stor_name " +
                              "WHERE pr.prod_rec_id = ?";

        try (PreparedStatement receiptStatement = myConn.prepareStatement(receiptQuery);
             PreparedStatement productStatement = myConn.prepareStatement(productQuery)) {

            receiptStatement.setInt(1, receiptId);
            productStatement.setInt(1, receiptId);

            try (ResultSet receiptResultSet = receiptStatement.executeQuery();
                 ResultSet productResultSet = productStatement.executeQuery()) {

                if (receiptResultSet.next()) {
                    StringBuilder receiptContent = new StringBuilder();
                    receiptContent.append("ID Απόδειξης: ").append(receiptResultSet.getInt("receipt_id")).append("\n");
                    receiptContent.append("Ημερομηνία: ").append(receiptResultSet.getTimestamp("date")).append("\n");
                    receiptContent.append("Σύνολο: ").append(receiptResultSet.getFloat("sum")).append(" €\n");
                    receiptContent.append("ID Υπαλλήλου: ").append(receiptResultSet.getInt("res_employee_id")).append("\n");
                    receiptContent.append("Email Πελάτη: ").append(receiptResultSet.getString("customer_email")).append("\n");
                    receiptContent.append("Πόντοι: ").append(receiptResultSet.getInt("receipt_points")).append("\n");
                    receiptContent.append("Voucher: ").append(receiptResultSet.getFloat("voucher")).append("\n");
                    receiptContent.append("\nΠροϊόντα:\n");

                    while (productResultSet.next()) {
                        String productName = productResultSet.getString("prod_rec_name");
                        float quantity = productResultSet.getFloat("prod_rec_quantity");
                        String quantityType = productResultSet.getString("prod_stor_quantity_type");
                        float price = productResultSet.getFloat("prod_stor_price");
                        int fpa = productResultSet.getInt("prod_stor_fpa");

                        receiptContent.append(String.format("%s, Ποσότητα: %.2f %s, Τιμή: %.2f €, ΦΠΑ: %d%%\n",
                                productName, quantity, quantityType, price, fpa));
                    }

                    String fileName = "receipt_" + receiptId + ".txt";
                    try (FileWriter fileWriter = new FileWriter(fileName)) {
                        fileWriter.write(receiptContent.toString());
                    }

                    JOptionPane.showMessageDialog(null, "Receipt downloaded: " + fileName);
                } else {
                    JOptionPane.showMessageDialog(null, "Receipt not found.");
                }
            }
        }

}

  private int getLatestReceiptId() throws SQLException, ClassNotFoundException {
    String query = "SELECT MAX(receipt_id) AS max_receipt_id FROM receipt";
    Connection myConn;
    myConn = getDataBaseCon();
    try (PreparedStatement statement = myConn.prepareStatement(query);
         ResultSet resultSet = statement.executeQuery()) {
        if (resultSet.next()) {
            return resultSet.getInt("max_receipt_id");
        } else {
            throw new SQLException("Failed to retrieve the latest receipt ID.");
        }
    }
}
    
    private int createReceipt() throws SQLException, ClassNotFoundException {
    int employeeId = checkCredentials();
    Connection myConn;
    myConn = getDataBaseCon();
    String insertReceiptSQL = "INSERT INTO receipt (date, res_employee_id) VALUES (NOW(), ?)";
    
    try (PreparedStatement statement = myConn.prepareStatement(insertReceiptSQL, Statement.RETURN_GENERATED_KEYS)) {
        statement.setInt(1, employeeId);
        
        int affectedRows = statement.executeUpdate();
        if (affectedRows == 0) {
            throw new SQLException("Creating receipt failed, no rows affected.");
        }

        try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
            if (generatedKeys.next()) {
                return generatedKeys.getInt(1); 
            } else {
                throw new SQLException("Creating receipt failed, no ID obtained.");
            }
        }
    }
}
    
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        try {            
            searchBarcode();
            jTextField3.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        
        addSearchBox();
    }//GEN-LAST:event_searchTextActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void attribute1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attribute1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attribute1FieldActionPerformed

    private void attribute2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attribute2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attribute2FieldActionPerformed

    private void attribute4FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attribute4FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attribute4FieldActionPerformed

    private boolean checkAlterations(String quantity, String fpa, String price, String barcode) {
    return isValidQuantity(quantity) && isValidFpa(fpa) && isValidPrice(price) && isValidBarcode(barcode);
}

private boolean isValidBarcode(String barcode) {
    return barcode != null && barcode.length() == 13;

}

private boolean isValidPrice(String price) {
   try {
        float p = Float.parseFloat(price);
        return p > 0;
    } catch (NumberFormatException e) {
        return false;
    }
   
}

private boolean isValidFpa(String fpa) {
    try {
        int f = Integer.parseInt(fpa);
        return f == 0 || f == 6 || f == 13 || f == 24;
    } catch (NumberFormatException e) {
        return false;
    }
}

  private boolean isValidQuantity(String quantity) {
    try {
        float q = Float.parseFloat(quantity);
        return q >= 0;
    } catch (NumberFormatException e) {
        return false;
    }
}
    private void updateTable() throws SQLException, ClassNotFoundException {
            DefaultTableModel model = (DefaultTableModel) Products.getModel();
            model.setColumnIdentifiers(new String[]{"Όνομα", "Ποσότητα","Είδος", "ΦΠΑ", "Τιμή", "Barcode"});
            model.setRowCount(0);
            
            Connection myConn;
            myConn = getDataBaseCon();
            Statement statement = myConn.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT prod_stor_name, prod_stor_quantity, prod_stor_quantity_type, prod_stor_fpa, prod_stor_price, prod_stor_barcode FROM product_Storage");
           
            while (resultSet.next()) {
               String name = resultSet.getString("prod_stor_name");
               String product_quantity = resultSet.getString("prod_stor_quantity");
               String quantity_type = resultSet.getString("prod_stor_quantity_type");
               String product_fpa = resultSet.getString("prod_stor_fpa");
               String product_price = resultSet.getString("prod_stor_price");
               String product_barcode = resultSet.getString("prod_stor_barcode");

                String[] product_info = {name, product_quantity,quantity_type, product_fpa, product_price, product_barcode};
                model.addRow(product_info);
            }
        
    }
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        String quantity = attribute3Field.getText();
        String fpa = attribute2Field.getText();
        String price = attribute4Field.getText();
        String barcode = attribute1Field.getText();

        if (checkAlterations(quantity, fpa, price, barcode)) {
            try {
                saveChanges();
                JOptionPane.showMessageDialog(this, "Οι αλλαγές αποθηκεύτηκαν επιτυχώς");
                updateTable();
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Σφάλμα κατά την αποθήκευση: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Παρακαλώ ελέγξτε τις τιμές που εισάγατε.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addSearchBox(){
        jComboBox1.setSelectedIndex(0); 
        jComboBox1.addActionListener((ActionEvent e) -> {
        String selectedOption = (String) jComboBox1.getSelectedItem();
            
            if (selectedOption.equals("Όνομα")) {
                String productName = searchText.getText();
                searchbyName(productName);
            } else if (selectedOption.equals("Barcode")) {
                String barcode = searchText.getText();
                searchByBarcode(barcode);
               
            }
        });
    }
    private void saveChanges() throws SQLException {
        String quantity = attribute3Field.getText();
        String fpa = attribute2Field.getText();
        String price = attribute4Field.getText();
        String barcode = attribute1Field.getText();
        String type =(String)jComboBox2.getSelectedItem();
        
        int selectedRow = Products.getSelectedRow();

        
        if (selectedRow != -1) {
            String productName = Products.getValueAt(selectedRow, 0).toString();
            
                Connection myConn;

                myConn = getDataBaseCon();
                PreparedStatement statement;
                statement = myConn.prepareStatement("UPDATE product_Storage SET prod_stor_quantity = ?, prod_stor_fpa = ?, prod_stor_price = ?, prod_stor_barcode = ?, prod_stor_quantity_type = ? WHERE prod_stor_name = ?");

                statement.setString(1, quantity);
                statement.setString(2, fpa);
                statement.setString(3, price);
                statement.setString(4,barcode);
                statement.setString(5,type);
                statement.setString(6,productName);

                int introwsUpdated = statement.executeUpdate();

        }else {
            // No row selected
            System.out.println("No row selected.");
        }
    
}
    
    private void searchbyName(String productName) {
    try {
        DefaultTableModel model = (DefaultTableModel) Products.getModel();
        model.setColumnIdentifiers(new String[]{"Όνομα", "Ποσότητα","Είδος", "ΦΠΑ", "Τιμή", "Barcode"});
        model.setRowCount(0);
        Connection myConn;
        myConn = getDataBaseCon();
        PreparedStatement statement = myConn.prepareStatement("SELECT prod_stor_name, prod_stor_quantity, prod_stor_quantity_type, prod_stor_fpa, prod_stor_price, prod_stor_barcode FROM product_Storage WHERE prod_stor_name LIKE ?");
            
            statement.setString(1, "%" + productName + "%");
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                String name = resultSet.getString("prod_stor_name");
                String quantity = resultSet.getString("prod_stor_quantity");
                String type = resultSet.getString("prod_stor_quantity_type");
                String fpa = resultSet.getString("prod_stor_fpa");
                String price = resultSet.getString("prod_stor_price");
                String barcode = resultSet.getString("prod_stor_barcode");
                
                String[] product_info = {name, quantity,type,fpa, price, barcode};
                model.addRow(product_info);
            }
        
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    private void searchByBarcode(String barcode) {
        try {
            DefaultTableModel model = (DefaultTableModel) Products.getModel();
            model.setColumnIdentifiers(new String[]{"Όνομα", "Ποσότητα","Είδος", "ΦΠΑ", "Τιμή", "Barcode"});
            model.setRowCount(0);
            Connection myConn;
            myConn = getDataBaseCon();
            PreparedStatement statement = myConn.prepareStatement("SELECT prod_stor_name, prod_stor_quantity, prod_stor_quantity_type, prod_stor_fpa, prod_stor_price, prod_stor_barcode FROM product_Storage WHERE prod_stor_barcode = ?");
                
                statement.setString(1, barcode); 
                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        String name = resultSet.getString("prod_stor_name");
                        String quantity = resultSet.getString("prod_stor_quantity");
                        String type = resultSet.getString("prod_stor_quantity_type");
                        String fpa = resultSet.getString("prod_stor_fpa");
                        String price = resultSet.getString("prod_stor_price");
                        String barcode_base = resultSet.getString("prod_stor_barcode");
                        
                        String[] product_info = {name, quantity,type, fpa, price, barcode_base};
                        model.addRow(product_info);
                    }
                
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        try {
            DefaultTableModel model = (DefaultTableModel) Products.getModel();
            model.setColumnIdentifiers(new String[]{"Όνομα", "Ποσότητα","Είδος", "ΦΠΑ", "Τιμή", "Barcode"});
            model.setRowCount(0);

            Connection myConn;

            myConn = getDataBaseCon();
            Statement statement = myConn.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT prod_stor_name, prod_stor_quantity, prod_stor_quantity_type, prod_stor_fpa, prod_stor_price, prod_stor_barcode FROM product_Storage");

            while (resultSet.next()) {
                String name = resultSet.getString("prod_stor_name");
                String quantity = resultSet.getString("prod_stor_quantity");
                String quantity_type = resultSet.getString("prod_stor_quantity_type");
                String fpa = resultSet.getString("prod_stor_fpa");
                String price = resultSet.getString("prod_stor_price");
                String barcode = resultSet.getString("prod_stor_barcode");

                String[] product_info = {name, quantity,quantity_type, fpa, price, barcode};
                model.addRow(product_info);
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton13ActionPerformed

    private void attribute3FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attribute3FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attribute3FieldActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void runPythonScript(String python_path) {
        try {
            // Adjust the Python command and script path as needed
            ProcessBuilder processBuilder = new ProcessBuilder("python", python_path);
            Process process = processBuilder.start();

            // Read the output from the command
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            // Wait for the process to complete
            int exitCode = process.waitFor();
            System.out.println("Python script exited with code: " + exitCode);

        } catch (IOException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }
    
    private void log_action_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_action_jcbActionPerformed
        ResultSet myRs = null;

        try{
               Connection myConn;
               myConn = getDataBaseCon();
               PreparedStatement statement;
               
               
                if(log_action_jcb.getSelectedItem().equals("INSERT")){
                    String[] columns = {"ID", "Log Action", "Table", "Inserted Record", "Time of Insertion"};
                    DefaultTableModel log_table_model = new DefaultTableModel(columns, 0);
                    String sql8 = "SELECT * FROM log_insert WHERE log_ins_table=?";
                    statement = myConn.prepareStatement(sql8);
                    statement.setString(1, (String)log_table_jcb.getSelectedItem());

                    myRs = statement.executeQuery();
                    ArrayList<log_insert> usersList = new ArrayList<>();
                    log_insert logIns;
                    
                    
                    while(myRs.next()){
                        logIns = new log_insert(myRs.getInt("log_ins_id"), myRs.getString("log_ins_action"), myRs.getString("log_ins_table"), myRs.getString("log_ins_new_record"), myRs.getString("log_ins_change_time"));
                        usersList.add(logIns);
                    }
                    
                    if(usersList.isEmpty()){
                        log_table_model.setRowCount(0);
                        log_table.setModel(log_table_model);
                    } else {
                        log_table_model.setRowCount(0);
                        Object[] row = new Object[5];
                        for(int i = 0; i<usersList.size(); i++){
                        row[0] = usersList.get(i).getlog_ins_id();
                        row[1] = usersList.get(i).getlog_ins_action();
                        row[2] = usersList.get(i).getlog_ins_table();
                        row[3] = usersList.get(i).getlog_ins_new_record();
                        row[4] = usersList.get(i).getlog_ins_change_time();
                        log_table_model.addRow(row);

                        log_table.setModel(log_table_model);
                        }
                    }
                }
                
                if(log_action_jcb.getSelectedItem().equals("UPDATE")){
                    //List<String> columnNames = getColumnNames(metaData, "INSERT");
                    //DefaultTableModel tableModel = new DefaultTableModel(columnNames.toArray(), 0);
                    //DefaultTableModel log_table = new DefaultTableModel(columnNames.toArray(), 0);
                    String[] columns = {"ID", "Log Action", "Table", "Column", "Updated Record", "Old Value", "Updated Value", "Time of Update"};
                    DefaultTableModel log_table_model = new DefaultTableModel(columns, 0);
                    String sql8 = "SELECT * FROM log_update WHERE log_up_table=?";
                    statement = myConn.prepareStatement(sql8);
                    statement.setString(1, (String)log_table_jcb.getSelectedItem());

                    myRs = statement.executeQuery();
                    ArrayList<log_update> usersList = new ArrayList<>();
                    log_update logUp;
                    
                    
                    while(myRs.next()){
                        logUp = new log_update(myRs.getInt("log_up_id"), myRs.getString("log_up_action"), myRs.getString("log_up_table"), myRs.getString("log_up_col_name"), myRs.getString("log_up_pk_value"), myRs.getString("log_up_old_value"), myRs.getString("log_up_new_value"), myRs.getString("log_up_change_time"));
                        usersList.add(logUp);
                    }
                    
                    if(usersList.isEmpty()){
                        log_table_model.setRowCount(0);
                        log_table.setModel(log_table_model);
                    } else {
                        log_table_model.setRowCount(0);
                        Object[] row = new Object[8];
                        for(int i = 0; i<usersList.size(); i++){
                        row[0] = usersList.get(i).getlog_up_id();
                        row[1] = usersList.get(i).getlog_up_action();
                        row[2] = usersList.get(i).getlog_up_table();
                        row[3] = usersList.get(i).getlog_up_col_name();
                        row[4] = usersList.get(i).getlog_up_pk_value();
                        row[5] = usersList.get(i).getlog_up_old_value();
                        row[6] = usersList.get(i).getlog_up_new_value();
                        row[7] = usersList.get(i).getlog_up_change_time();
                        log_table_model.addRow(row);

                        log_table.setModel(log_table_model);
                        }
                    }
                }
                
                if(log_action_jcb.getSelectedItem().equals("DELETE")){
                    String[] columns = {"ID", "Log Action", "Table", "Deleted Record", "Time of Deletion"};
                    DefaultTableModel log_table_model = new DefaultTableModel(columns, 0);
                    String sql8 = "SELECT * FROM log_delete WHERE log_del_table=?";
                    statement = myConn.prepareStatement(sql8);
                    statement.setString(1, (String)log_table_jcb.getSelectedItem());

                    myRs = statement.executeQuery();
                    ArrayList<log_delete> usersList = new ArrayList<>();
                    log_delete logDel;
                    
                    
                    while(myRs.next()){
                        logDel = new log_delete(myRs.getInt("log_del_id"), myRs.getString("log_del_action"), myRs.getString("log_del_table"), myRs.getString("log_del_value"), myRs.getString("log_del_change_time"));
                        usersList.add(logDel);
                    }
                    
                    if(usersList.isEmpty()){
                        log_table_model.setRowCount(0);
                        log_table.setModel(log_table_model);
                    } else {
                        log_table_model.setRowCount(0);
                        Object[] row = new Object[5];
                        for(int i = 0; i<usersList.size(); i++){
                        row[0] = usersList.get(i).getlog_del_id();
                        row[1] = usersList.get(i).getlog_del_action();
                        row[2] = usersList.get(i).getlog_del_table();
                        row[3] = usersList.get(i).getlog_del_value();
                        row[4] = usersList.get(i).getlog_del_change_time();
                        log_table_model.addRow(row);

                        log_table.setModel(log_table_model);
                        }
                    }
                }
               
        } catch(SQLException exc){
               exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }
            }catch(SQLException exc){
                   exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_log_action_jcbActionPerformed

    private void automated_order_jcbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_automated_order_jcbMousePressed
        
    }//GEN-LAST:event_automated_order_jcbMousePressed

    private void automated_order_jcbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_automated_order_jcbMouseClicked
        Statement stm = null;
        ResultSet myRs = null;
        
        try{
                Connection myConn;

                myConn = getDataBaseCon();
               
                String sql1 = "SELECT supplier_name FROM supplier";
                stm = myConn.createStatement();
                myRs = stm.executeQuery(sql1);
                if(automated_order_jcb.getItemCount() == 0){
                    while(myRs.next()){
                        String code = myRs.getString("supplier_name");
                        automated_order_jcb.addItem(code);
                    }
                }
                
                if(quan_type_jcb.getItemCount() == 0){
                    quan_type_jcb.addItem("τεμάχια");
                    quan_type_jcb.addItem("κουτιά");
                    quan_type_jcb.addItem("εξάδες");
                    quan_type_jcb.addItem("κιλά");
                    quan_type_jcb.addItem("πακέτα");
                    quan_type_jcb.addItem("γρμμάρια");
                    quan_type_jcb.addItem("λίτρα");
                }
        }catch(SQLException exc){
               exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }
                if(stm != null){
                    stm.close();
                }
                
            }catch(SQLException exc){
                   exc.printStackTrace();
            }
        }  
    }//GEN-LAST:event_automated_order_jcbMouseClicked

    private void automated_order_jcbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_automated_order_jcbMouseEntered
        
    }//GEN-LAST:event_automated_order_jcbMouseEntered

    private void automated_order_jcbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_automated_order_jcbItemStateChanged
        String selectedItem = (String) automated_order_jcb.getSelectedItem();
        Statement stm = null;
        ResultSet myRs = null;
        PreparedStatement pstmt = null;

        
        try{
                Connection myConn;

                myConn = getDataBaseCon();
                
                LocalDate currentDate = LocalDate.now();
                DateTimeFormatter monthFormatter = DateTimeFormatter.ofPattern("MM");
                String currentMonth = currentDate.format(monthFormatter);
        
                String sql2 = "SELECT prod_inv_name, ROUND(AVG(prod_inv_quantity)) AS av_quantity, prod_inv_quantity_type FROM product_Invoice JOIN Invoice ON prod_inv_id = invoice_id JOIN supplier ON inv_supplier_id = supplier_id WHERE supplier_name = ? AND MONTH(date) = ? GROUP BY prod_inv_name";
                pstmt = myConn.prepareStatement(sql2);
                pstmt.setString(1, selectedItem);
                pstmt.setString(2, currentMonth);
                myRs = pstmt.executeQuery();
                ArrayList<automatedOrder> usersList = new ArrayList<>();
                automatedOrder autOr;
                while(myRs.next()){
                    autOr = new automatedOrder(myRs.getString("prod_inv_name"), myRs.getInt("av_quantity"), myRs.getString("prod_inv_quantity_type"));
                    usersList.add(autOr);    
                }
                DefaultTableModel model = (DefaultTableModel)automated_order_table.getModel();
                model.setRowCount(0);
                Object[] row = new Object[3];
                for(int i = 0; i<usersList.size(); i++){
                    row[0] = usersList.get(i).getprod_inv_name();
                    row[1] = usersList.get(i).getav_quantity();
                    row[2] = usersList.get(i).getprod_inv_quantity_type();
                    model.addRow(row);
                }
                
        }catch(SQLException exc){
               exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }
                if(stm != null){
                    stm.close();
                }              
            }catch(SQLException exc){
                   exc.printStackTrace();
            }
        }        
    }//GEN-LAST:event_automated_order_jcbItemStateChanged

    private void automated_order_jcbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_automated_order_jcbMouseReleased
        
    }//GEN-LAST:event_automated_order_jcbMouseReleased

    private void jStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jStaffMouseClicked
        try {
            // TODO add your handling code here:
            Component[] components = jPanel11.getComponents();
            for (Component component : components) {
                if (component != jStaff && component != jStatistics) {
                    jPanel11.remove(component);
                }
            }

            jStaff.setVisible(false);
            jStatistics.setVisible(false);
            // Update jPanel11
            jPanel11.revalidate();
            jPanel11.repaint(); // Create and populate the table

            // Create and populate the table
            DefaultTableModel tableModel = new DefaultTableModel();
            JTable table = new JTable(tableModel);
            tableModel.addColumn("User ID");
            tableModel.addColumn("Rights");
            tableModel.addColumn("Name");
            tableModel.addColumn("Surname");
            tableModel.addColumn("AFM");
            tableModel.addColumn("Phone");
            tableModel.addColumn("Address");
            tableModel.addColumn("Salary");

            Connection myConn;

            myConn = getDataBaseCon();
            Statement statement = myConn.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT u.user_id, u.rights, u.name, u.surname, e.afm, e.phone, e.address, e.salary FROM user u INNER JOIN employee e ON u.user_id = e.employee_id");

            while (resultSet.next()) {
                int userId = resultSet.getInt("user_id");
                String rights = resultSet.getString("rights");
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                long afm = resultSet.getLong("afm");
                long phone = resultSet.getLong("phone");
                String address = resultSet.getString("address");
                float salary = resultSet.getFloat("salary");

                Object[] rowData = {userId, rights, name, surname, afm, phone, address, salary};
                tableModel.addRow(rowData);

                table.setBorder(BorderFactory.createCompoundBorder(
                    new EmptyBorder(200, 0, 0, 0), // Top inset of 20 pixels
                    table.getBorder()
                ));
                // Add the table to jPanel11
                jPanel11.setLayout(new BorderLayout());
                jPanel11.add(new JScrollPane(table), BorderLayout.CENTER);

                // Create a button to go back
                JButton backButton = new JButton("Go Back");

                // Create a panel for the button
                JPanel buttonPanel = new JPanel(new GridBagLayout());
                GridBagConstraints gbc = new GridBagConstraints();
                gbc.gridx = 0;
                gbc.gridy = 0;
                gbc.weightx = 1;
                gbc.fill = GridBagConstraints.HORIZONTAL;
                buttonPanel.add(backButton, gbc);
                backButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        // Remove the table and the button
                        jPanel11.remove(new JScrollPane(table)); // Remove the JScrollPane containing the table
                        jPanel11.remove(buttonPanel);
                        Component[] components = jPanel11.getComponents();
                        for (Component component : components) {
                            if (component != jStaff && component != jStatistics) {
                                jPanel11.remove(component);
                            }
                        }
                        jButton6.doClick();
                    }
                });
                jPanel11.add(buttonPanel, BorderLayout.SOUTH);

                jPanel11.revalidate();
                jPanel11.repaint();

            }

        } catch (SQLException ex) {
            Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_jStaffMouseClicked

    private void jStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStaffActionPerformed

    }//GEN-LAST:event_jStaffActionPerformed

    private void jStatisticsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jStatisticsMouseClicked
        // TODO add your handling code here:
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(true);
        jPanel17.setVisible(false);

        jComboStatistics.removeAllItems();
        jComboStatistics.addItem("z");
        jComboStatistics.addItem("top products");
        jComboStatistics.setSelectedIndex(0);
    }//GEN-LAST:event_jStatisticsMouseClicked

    private void jStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStatisticsActionPerformed
        // TODO add your handling code here:
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(true);
        jPanel17.setVisible(false);

        jComboStatistics.removeAllItems();
        jComboStatistics.addItem("Select an option");
        jComboStatistics.addItem("z");
        jComboStatistics.addItem("top products");
        jComboStatistics.setSelectedIndex(0);

    }//GEN-LAST:event_jStatisticsActionPerformed

    private void jComboStatisticsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboStatisticsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboStatisticsMouseClicked

    private void jComboStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboStatisticsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboStatisticsActionPerformed

    private void jbackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbackMouseClicked
        // TODO add your handling code here:
        jPanel5.setVisible(false);
        jPanel6.setVisible(false);
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(true);
        jPanel12.setVisible(false);
        jPanel13.setVisible(false);
        jPanel15.setVisible(false);
        jPanel16.setVisible(false);
        jPanel17.setVisible(false);
    }//GEN-LAST:event_jbackMouseClicked

    private void jbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbackActionPerformed

    private void jshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jshowActionPerformed
        // TODO add your handling code here:
        String selected_item = jComboStatistics.getSelectedItem().toString();
        String start = jstartdate.getText();
        String end = jenddate.getText();

        Component[] components = jPanel16.getComponents();
        for (Component component : components) {
            if (component != jComboStatistics && component != jshow && component != jback && component != label2 && component != jstartdate && component != jenddate ) {
                jPanel16.remove(component);
            }
        }

        if (selected_item.equals("top products")) {
            runPythonScriptWithDates(path + "top_products.py", start, end);
            System.out.println("top");
            try {
                // Load the plot image from file
                BufferedImage originalImage = ImageIO.read(new File(path + "top_products.png"));

                // Get the dimensions of the JPanel
                int panelWidth = jPanel16.getWidth();
                int panelHeight = jPanel16.getHeight();

                // Define the scaling factor to make the image slightly smaller than the panel
                double scaleFactor = 0.7; // Scale down to 90% of the panel size

                // Calculate the scaled dimensions
                int scaledWidth = (int) (panelWidth * scaleFactor);
                int scaledHeight = (int) (panelHeight * scaleFactor);

                // Scale the image to fit within the scaled dimensions
                Image scaledImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
                BufferedImage bufferedScaledImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = bufferedScaledImage.createGraphics();
                g2d.drawImage(scaledImage, 0, 0, null);
                g2d.dispose();

                // Create a JLabel to hold the scaled image
                JLabel label = new JLabel(new ImageIcon(bufferedScaledImage));

                // Set layout to BorderLayout to center the image
                jPanel16.setLayout(new BorderLayout());
                // Add the JLabel to the center of jPanel11
                jPanel16.add(label, BorderLayout.CENTER);

                // Update jPanel11
                jPanel16.revalidate();
                jPanel16.repaint();

            } catch (IOException e) {
                e.printStackTrace(); // Print the stack trace of the exception
            }
        }
        else if (selected_item.equals("z")) {
            // Handle the case when "z" is selected
            runPythonScriptWithDates(path + "z.py", start, end);
            System.out.println("z"); // Placeholder for running Python script

            try {
                // Load the plot image from file
                BufferedImage originalImage = ImageIO.read(new File(path + "z.png"));

                // Get the dimensions of the JPanel
                int panelWidth = jPanel16.getWidth();
                int panelHeight = jPanel16.getHeight();

                // Define the scaling factor to make the image slightly smaller than the panel
                double scaleFactor = 0.7; // Scale down to 90% of the panel size

                // Calculate the scaled dimensions
                int scaledWidth = (int) (panelWidth * scaleFactor);
                int scaledHeight = (int) (panelHeight * scaleFactor);

                // Scale the image to fit within the scaled dimensions
                Image scaledImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
                BufferedImage bufferedScaledImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = bufferedScaledImage.createGraphics();
                g2d.drawImage(scaledImage, 0, 0, null);
                g2d.dispose();

                // Create a JLabel to hold the scaled image
                JLabel label = new JLabel(new ImageIcon(bufferedScaledImage));

                // Set layout to BorderLayout to center the image
                jPanel16.setLayout(new BorderLayout());
                // Add the JLabel to the center of jPanel11
                jPanel16.add(label, BorderLayout.CENTER);

                // Update jPanel11
                jPanel16.revalidate();
                jPanel16.repaint();

            } catch (IOException e) {
                e.printStackTrace(); // Print the stack trace of the exception
            }
        }
    }//GEN-LAST:event_jshowActionPerformed

    private void jstartdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstartdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jstartdateActionPerformed

    private void jenddateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jenddateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jenddateActionPerformed

    private void jPanel16AncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel16AncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel16AncestorRemoved

    private void jTextField3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField3MouseClicked
        // TODO add your handling code here:
        jTextField3.setText("");
    }//GEN-LAST:event_jTextField3MouseClicked

    private void searchTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTextMouseClicked
        // TODO add your handling code here:
        searchText.setText("");
    }//GEN-LAST:event_searchTextMouseClicked

    private void jButton14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton14MouseClicked
        // TODO add your handling code here:
        runPythonScript(path + "metro_web.py");
        runPythonScript(path + "markt_web.py");
        ResultSet myRs = null;
        Statement st = null;

        try {
            Connection myConn;

            myConn = getDataBaseCon();
            st = myConn.createStatement();

            String sql = "SELECT * FROM search_results";
            myRs = st.executeQuery(sql);
            DefaultTableModel tb1Model = (DefaultTableModel) jTableSearch.getModel();

            tb1Model.setRowCount(0);

            while (myRs.next()) {
                String search_name = String.valueOf(myRs.getString("prod_results_name"));
                String search_price_1 = String.valueOf(myRs.getString("prod_price_1"));
                String search_price_2 = String.valueOf(myRs.getString("prod_price_2"));

                String tbData[] = { search_name, search_price_1, search_price_2 };

                try {
                    float price1 = search_price_1.equals("-") ? Float.POSITIVE_INFINITY : Float.parseFloat(search_price_1);
                    float price2 = search_price_2.equals("-") ? Float.POSITIVE_INFINITY : Float.parseFloat(search_price_2);

                    if (price1 < price2) {
                        // Make price1 bold if it's greater than price2
                        tbData[1] = "<html><b><font style='background-color:yellow'>" + search_price_1 + "</font></b></html>";
                    } else {
                        // Reset to normal if not greater
                        tbData[2] = "<html><b><font style='background-color:yellow'>" + search_price_2 + "</font></b></html>";
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace(); // Handle the case where price conversion fails
                }

                tb1Model.addRow(tbData);
            }
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

            TableColumnModel columnModel = jTableSearch.getColumnModel();
            for (int i = 0; i < columnModel.getColumnCount(); i++) {
                columnModel.getColumn(i).setCellRenderer(centerRenderer);
            }
        } // Catch bblock to handle DB exceptions
        catch (SQLException exc) {
            exc.printStackTrace();
        } finally {
            try {
                if (myRs != null) {
                    myRs.close();
                }

            } catch (SQLException exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton14MouseClicked

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButtonDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseClicked
        // TODO add your handling code here:

        ResultSet myRs = null;
        Statement st = null;

        try {
            Connection myConn;

            myConn = getDataBaseCon();
            st = myConn.createStatement();

            if (jTableSearch.getSelectedRowCount() == 1) {
                // Get the selected row index
                int selectedRowIndex = jTableSearch.getSelectedRow();
                // Get the value of the primary key of the selected row
                String selectedSearchName = (String) jTableSearch.getValueAt(selectedRowIndex, 0);

                // Delete the selected row from the database
                String sqlDelete = "DELETE FROM product_search WHERE prod_search_name = ?";
                PreparedStatement pstDelete = myConn.prepareStatement(sqlDelete);
                pstDelete.setString(1, selectedSearchName);
                pstDelete.executeUpdate();  // Use executeUpdate for DELETE operation
                pstDelete.close();

                JOptionPane.showMessageDialog(this, "Deleted successfully.");
            }

            String sql = "SELECT * FROM product_search";
            myRs = st.executeQuery(sql);
            DefaultTableModel tb1Model = (DefaultTableModel) jTableSearch.getModel();
            tb1Model.setRowCount(0);

            while (myRs.next()) {
                String search_name = String.valueOf(myRs.getString("prod_search_name"));

                String tbData[] = { search_name, "-", "-" };

                tb1Model.addRow(tbData);
            }

        } // Catch bblock to handle DB exceptions
        catch (SQLException exc) {
            exc.printStackTrace();
        } finally {
            try {
                if (myRs != null) {
                    myRs.close();
                }
            } catch (SQLException exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonDeleteMouseClicked

    private void jButtonAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseClicked
        // TODO add your handling code here:

        ResultSet myRs = null;
        Statement st = null;

        try {
            Connection myConn;

            myConn = getDataBaseCon();
            st = myConn.createStatement();

            String searchName = jProductSearchAdd.getText().trim();
            jProductSearchAdd.setText("");
            String sqlInsert = "INSERT INTO product_search (prod_search_name) VALUES ('" + searchName + "')";
            st.executeUpdate(sqlInsert);

            String sql = "SELECT * FROM product_search";
            myRs = st.executeQuery(sql);
            DefaultTableModel tb1Model = (DefaultTableModel) jTableSearch.getModel();
            tb1Model.setRowCount(0);

            while (myRs.next()) {
                String search_name = String.valueOf(myRs.getString("prod_search_name"));

                String tbData[] = { search_name, "-", "-" };

                tb1Model.addRow(tbData);
            }

        } // Catch bblock to handle DB exceptions
        catch (SQLException exc) {
            exc.printStackTrace();
        } finally {
            try {
                if (myRs != null) {
                    myRs.close();
                }
            } catch (SQLException exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonAddMouseClicked

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jpasswordMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpasswordMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jpasswordMouseEntered

    private void jpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpasswordActionPerformed
        // TODO add your handling code here:
        ResultSet myRs = null;

        try{
            Connection myConn;

            myConn = getDataBaseCon();
            String sql7 = "SELECT user_id FROM user WHERE password=?";
            PreparedStatement statement;
            statement = myConn.prepareStatement(sql7);
            statement.setString(1, jpassword.getText());
            myRs = statement.executeQuery();

            if(myRs.next()){
                JOptionPane.showMessageDialog(null, "Username and Password Matched");
                jPanel5.setVisible(false);
                jPanel6.setVisible(false);
                jPanel7.setVisible(false);
                jPanel8.setVisible(false);
                jPanel9.setVisible(false);
                jPanel10.setVisible(false);
                jPanel11.setVisible(true);
                jPanel12.setVisible(false);
                jPanel13.setVisible(false);
                jPanel15.setVisible(false);
                jPanel16.setVisible(false);
                jPanel17.setVisible(false);

                runPythonScript(path + "daily_plots.py");
                try {
                    // Load the plot image from file
                    BufferedImage originalImage = ImageIO.read(new File(path + "daily_plots.png"));

                    // Get the dimensions of the JPanel
                    int panelWidth = jPanel11.getWidth();
                    int panelHeight = jPanel11.getHeight();

                    // Define the scaling factor to make the image slightly smaller than the panel
                    double scaleFactor = 0.7; // Scale down to 90% of the panel size

                    // Calculate the scaled dimensions
                    int scaledWidth = (int) (panelWidth * scaleFactor);
                    int scaledHeight = (int) (panelHeight * scaleFactor);

                    // Scale the image to fit within the scaled dimensions
                    Image scaledImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
                    BufferedImage bufferedScaledImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
                    Graphics2D g2d = bufferedScaledImage.createGraphics();
                    g2d.drawImage(scaledImage, 0, 0, null);
                    g2d.dispose();

                    // Create a JLabel to hold the scaled image
                    JLabel label = new JLabel(new ImageIcon(bufferedScaledImage));

                    // Clear existing components from jPanel11

                    // Set layout to BorderLayout to center the image
                    jPanel11.setLayout(new BorderLayout());
                    // Add the JLabel to the center of jPanel11
                    jPanel11.add(label, BorderLayout.CENTER);

                    // Update jPanel11
                    jPanel11.revalidate();
                    jPanel11.repaint();

                } catch (IOException e) {
                    e.printStackTrace(); // Print the stack trace of the exception
                }

            } else{
                JOptionPane.showMessageDialog(null, "Wrong Username or Password");
                password_jtf.setText("");
            }
        }catch(SQLException exc){
            exc.printStackTrace();
        }finally{
            try{
                if(myRs != null){
                    myRs.close();
                }

            }catch(SQLException exc){
                exc.printStackTrace();
            }
        }

    }//GEN-LAST:event_jpasswordActionPerformed

    private void jPanel17AncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel17AncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel17AncestorRemoved

    private void searchBarcode() throws SQLException, ClassNotFoundException {
    String barcode = jTextField3.getText();
    String searchProduct = "SELECT * FROM product_Storage WHERE prod_stor_barcode = ?";
     DefaultTableModel model = (DefaultTableModel) receipt_table.getModel();
     model.setColumnIdentifiers(new String[]{"Όνομα", "Ποσότητα","Είδος", "ΦΠΑ", "Τιμή"});



    try (Connection myConn = getDataBaseCon();
         PreparedStatement searchProductStatement = myConn.prepareStatement(searchProduct)) {
        searchProductStatement.setString(1, barcode);

        try (ResultSet productResultSet = searchProductStatement.executeQuery()) {
            if (productResultSet.next()) {
                String productName = productResultSet.getString("prod_stor_name");
                int fpa = productResultSet.getInt("prod_stor_fpa");
                float price = productResultSet.getFloat("prod_stor_price");
                String quantityType = productResultSet.getString("prod_stor_quantity_type");
                int quantity = 1;

                model.addRow(new Object[]{productName, quantity, quantityType, fpa, price});
            } else {
                JOptionPane.showMessageDialog(this, "Το προϊόν με το συγκεκριμένο barcode δεν βρέθηκε.", "Σφάλμα", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Σφάλμα κατά την αναζήτηση του προϊόντος.", "Σφάλμα", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private Integer checkCredentials() throws ClassNotFoundException, SQLException {
    String enteredPassword = jTextField2.getText();
    Integer userId = null;

    Connection myConn;
    myConn = getDataBaseCon();
    PreparedStatement statement = myConn.prepareStatement("SELECT user_id FROM user WHERE password = ?");
    statement.setString(1, enteredPassword);
        
        try (ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                userId = resultSet.getInt("user_id");
            }
        
    }
 

    if (userId != null) {
        // Ελέγξτε αν το userId υπάρχει στον πίνακα employee

        
        PreparedStatement statement2 = myConn.prepareStatement("SELECT employee_id FROM employee WHERE employee_id = ?");
        statement2.setInt(1, userId);

            try (ResultSet resultSet = statement2.executeQuery()) {
                if (resultSet.next()) {
                   //JOptionPane.showMessageDialog(this, "Σωστός κωδικός");
                    jPanel5.setVisible(false);
                    jPanel8.setVisible(false);
                    jPanel9.setVisible(false);
                    jPanel10.setVisible(false);
                    jPanel11.setVisible(false);
                    jPanel12.setVisible(false);
                    jPanel13.setVisible(false);
                    jPanel6.setVisible(false);
                    jPanel15.setVisible(true);
                    jPanel16.setVisible(false);
                    jPanel17.setVisible(false);
                    return userId; 
                } else {
                    JOptionPane.showMessageDialog(this, "Ο χρήστης δεν είναι υπάλληλος.");
                }
            }
        
    } else {
        JOptionPane.showMessageDialog(this, "Λάθος κωδικός");
    }

    return null;
    }
    
    private List<String> getColumnNames(DatabaseMetaData metaData, String tableName) throws SQLException {
        List<String> columnNames = new ArrayList<>();
        ResultSet resultSet = metaData.getColumns(null, null, tableName, null);
        while (resultSet.next()) {
            columnNames.add(resultSet.getString("COLUMN_NAME"));
        }
        return columnNames;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new mainMenu().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(mainMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ProductTable;
    private javax.swing.JTable Products;
    private javax.swing.JTextField attribute1Field;
    private javax.swing.JTextField attribute2Field;
    private javax.swing.JTextField attribute3Field;
    private javax.swing.JTextField attribute4Field;
    private javax.swing.JTextField aut_prod_name_jtf;
    private javax.swing.JTextField aut_prod_quan_jtf;
    private javax.swing.JComboBox<String> automated_order_jcb;
    private javax.swing.JTable automated_order_table;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboStatistics;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jProductSearchAdd;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private java.awt.Button jStaff;
    private java.awt.Button jStatistics;
    private javax.swing.JTable jTableSearch;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton jback;
    private javax.swing.JTextField jenddate;
    private javax.swing.JTextField jpassword;
    private javax.swing.JButton jshow;
    private javax.swing.JTextField jstartdate;
    private java.awt.Label label2;
    private javax.swing.JComboBox<String> log_action_jcb;
    private javax.swing.JTable log_table;
    private javax.swing.JComboBox<String> log_table_jcb;
    private javax.swing.JTextField password_jtf;
    private javax.swing.JComboBox<String> quan_type_jcb;
    private javax.swing.JTable receipt_table;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables
}
